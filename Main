#include <SFML/Graphics.hpp>
#include <SFML/Window.hpp>
#include <ctime>
#include <cstdlib>
#include <string>
#include <iostream>
#include <vector>
#include <fstream>
#include <algorithm>

enum GameState {
    MENU,
    GAME,
    GAME_MODE,
    TUTORIAL,
    HIGH_SCORES,
    GAME_OVER
};

struct GameSettings {
    float wordSpeed;
    int wordLength;
};

class Star {
public:
    Star(const sf::RenderWindow& window) {
        float x = static_cast<float>(rand() % window.getSize().x);
        float y = static_cast<float>(rand() % (window.getSize().y - 100));
        position = sf::Vector2f(x, y);
        speed = static_cast<float>(rand() % 50) / 100.0f + 0.05f;
        size = static_cast<float>(rand() % 3) + 1.0f;
        starShape.setRadius(size);
        starShape.setFillColor(sf::Color::White);
        starShape.setPosition(position);
    }

    void update(float deltaTime) {
        position.x += speed * deltaTime;
        if (position.x > 800) {
            position.x = 0;
            position.y = static_cast<float>(rand() % (600 - 100));
        }
        starShape.setPosition(position);
    }

    void draw(sf::RenderWindow& window) {
        window.draw(starShape);
    }

private:
    sf::Vector2f position;
    float speed;
    float size;
    sf::CircleShape starShape;
};

std::string getRandomWord(int length) {
    static const char characters[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    std::string word;
    for (int i = 0; i < length; ++i) {
        word += characters[rand() % (sizeof(characters) - 1)];
    }
    return word;
}

sf::Vector2f getRandomPosition(const sf::RenderWindow& window, const std::vector<std::pair<std::string, sf::Vector2f>>& words) {
    float x = -200.0f;
    float y;
    bool overlap;
    do {
        overlap = false;
        y = static_cast<float>(rand() % (window.getSize().y - 100 - 50));
        for (const auto& word : words) {
            if (abs(word.second.y - y) < 50) {
                overlap = true;
                break;
            }
        }
    } while (overlap);
    return sf::Vector2f(x, y);
}

void saveHighScores(const std::vector<int>& scores) {
    std::ofstream outFile("highscores.txt");
    if (outFile.is_open()) {
        for (int score : scores) {
            outFile << score << std::endl;
        }
        outFile.close();
    }
}

std::vector<int> loadHighScores() {
    std::vector<int> scores(3, 0);
    std::ifstream inFile("highscores.txt");
    if (inFile.is_open()) {
        for (int i = 0; i < 3 && !inFile.eof(); ++i) {
            inFile >> scores[i];
        }
        inFile.close();
    }
    std::sort(scores.rbegin(), scores.rend());
    return scores;
}

int main() {
    srand(static_cast<unsigned>(time(0)));

    sf::RenderWindow window(sf::VideoMode(800, 600), "Monkey Typer");
    window.setFramerateLimit(60);

    sf::Font font;
    if (!font.loadFromFile("Oswald-VariableFont_wght.ttf")) {
        std::cerr << "Error: Failed to load font 'Oswald-VariableFont_wght.ttf'" << std::endl;
        return EXIT_FAILURE;
    }

    sf::Font titleFont;
    if (!titleFont.loadFromFile("ProtestGuerrilla-Regular.ttf")) {
        std::cerr << "Error: Failed to load font 'ProtestGuerrilla-Regular.ttf'" << std::endl;
        return EXIT_FAILURE;
    }

    GameSettings settings = { 1.0f, 5 };
    GameState state = MENU;
    std::vector<int> highScores = loadHighScores();

    sf::Text titleText;
    titleText.setFont(titleFont);
    titleText.setCharacterSize(80);
    titleText.setFillColor(sf::Color::Yellow);
    titleText.setString("Monkey Typer");
    titleText.setPosition((window.getSize().x - titleText.getLocalBounds().width) / 2, 20);

    sf::Text startButton;
    startButton.setFont(font);
    startButton.setCharacterSize(40);
    startButton.setFillColor(sf::Color::White);
    startButton.setString("Start Game");

    sf::Text gameModeButton;
    gameModeButton.setFont(font);
    gameModeButton.setCharacterSize(40);
    gameModeButton.setFillColor(sf::Color::White);
    gameModeButton.setString("Game Mode");

    sf::Text tutorialButton;
    tutorialButton.setFont(font);
    tutorialButton.setCharacterSize(40);
    tutorialButton.setFillColor(sf::Color::White);
    tutorialButton.setString("Tutorial");

    sf::Text highScoreButton;
    highScoreButton.setFont(font);
    highScoreButton.setCharacterSize(40);
    highScoreButton.setFillColor(sf::Color::White);
    highScoreButton.setString("High Score");

    sf::Text quitButton;
    quitButton.setFont(font);
    quitButton.setCharacterSize(40);
    quitButton.setFillColor(sf::Color::White);
    quitButton.setString("Quit Game");

    sf::Text gameOverText;
    gameOverText.setFont(font);
    gameOverText.setCharacterSize(50);
    gameOverText.setFillColor(sf::Color::Red);
    gameOverText.setString("Game Over!");
    gameOverText.setPosition((window.getSize().x - gameOverText.getLocalBounds().width) / 2, 250);

    std::vector<sf::Text*> buttons = { &startButton, &gameModeButton, &tutorialButton, &highScoreButton, &quitButton };
    float buttonSpacing = 40.f;
    float totalButtonHeight = buttons.size() * (40 + buttonSpacing) - buttonSpacing;
    float buttonStartY = (600 - totalButtonHeight) / 2 + 100;

    for (size_t i = 0; i < buttons.size(); ++i) {
        sf::FloatRect bounds = buttons[i]->getLocalBounds();
        buttons[i]->setPosition((800 - bounds.width) / 2 - bounds.left, buttonStartY + i * (40 + buttonSpacing));
    }

    sf::Text gameModeSpeedLabel;
    gameModeSpeedLabel.setFont(font);
    gameModeSpeedLabel.setCharacterSize(40);
    gameModeSpeedLabel.setFillColor(sf::Color::White);
    gameModeSpeedLabel.setString("Word Speed");
    gameModeSpeedLabel.setPosition(100, 100);

    sf::Text speedOption1Label;
    speedOption1Label.setFont(font);
    speedOption1Label.setCharacterSize(30);
    speedOption1Label.setFillColor(sf::Color::White);
    speedOption1Label.setString("Speed: 1");
    speedOption1Label.setPosition(150, 150);

    sf::Text speedOption2Label;
    speedOption2Label.setFont(font);
    speedOption2Label.setCharacterSize(30);
    speedOption2Label.setFillColor(sf::Color::White);
    speedOption2Label.setString("Speed: 2");
    speedOption2Label.setPosition(150, 200);

    sf::Text speedOption3Label;
    speedOption3Label.setFont(font);
    speedOption3Label.setCharacterSize(30);
    speedOption3Label.setFillColor(sf::Color::White);
    speedOption3Label.setString("Speed: 3");
    speedOption3Label.setPosition(150, 250);

    sf::Text gameModeLengthLabel;
    gameModeLengthLabel.setFont(font);
    gameModeLengthLabel.setCharacterSize(40);
    gameModeLengthLabel.setFillColor(sf::Color::White);
    gameModeLengthLabel.setString("Word Length");
    gameModeLengthLabel.setPosition(100, 300);

    sf::Text lengthOption1Label;
    lengthOption1Label.setFont(font);
    lengthOption1Label.setCharacterSize(30);
    lengthOption1Label.setFillColor(sf::Color::White);
    lengthOption1Label.setString("Length: 3");
    lengthOption1Label.setPosition(150, 350);

    sf::Text lengthOption2Label;
    lengthOption2Label.setFont(font);
    lengthOption2Label.setCharacterSize(30);
    lengthOption2Label.setFillColor(sf::Color::White);
    lengthOption2Label.setString("Length: 5");
    lengthOption2Label.setPosition(150, 400);

    sf::Text lengthOption3Label;
    lengthOption3Label.setFont(font);
    lengthOption3Label.setCharacterSize(30);
    lengthOption3Label.setFillColor(sf::Color::White);
    lengthOption3Label.setString("Length: 7");
    lengthOption3Label.setPosition(150, 450);

    sf::CircleShape speedOption1(15);
    speedOption1.setPosition(100, 160);
    speedOption1.setOutlineThickness(2);
    speedOption1.setOutlineColor(sf::Color::White);
    speedOption1.setFillColor(settings.wordSpeed == 1.0f ? sf::Color::White : sf::Color::Transparent);

    sf::CircleShape speedOption2(15);
    speedOption2.setPosition(100, 210);
    speedOption2.setOutlineThickness(2);
    speedOption2.setOutlineColor(sf::Color::White);
    speedOption2.setFillColor(settings.wordSpeed == 2.0f ? sf::Color::White : sf::Color::Transparent);

    sf::CircleShape speedOption3(15);
    speedOption3.setPosition(100, 260);
    speedOption3.setOutlineThickness(2);
    speedOption3.setOutlineColor(sf::Color::White);
    speedOption3.setFillColor(settings.wordSpeed == 3.0f ? sf::Color::White : sf::Color::Transparent);

    sf::CircleShape lengthOption1(15);
    lengthOption1.setPosition(100, 360);
    lengthOption1.setOutlineThickness(2);
    lengthOption1.setOutlineColor(sf::Color::White);
    lengthOption1.setFillColor(settings.wordLength == 3 ? sf::Color::White : sf::Color::Transparent);

    sf::CircleShape lengthOption2(15);
    lengthOption2.setPosition(100, 410);
    lengthOption2.setOutlineThickness(2);
    lengthOption2.setOutlineColor(sf::Color::White);
    lengthOption2.setFillColor(settings.wordLength == 5 ? sf::Color::White : sf::Color::Transparent);

    sf::CircleShape lengthOption3(15);
    lengthOption3.setPosition(100, 460);
    lengthOption3.setOutlineThickness(2);
    lengthOption3.setOutlineColor(sf::Color::White);
    lengthOption3.setFillColor(settings.wordLength == 7 ? sf::Color::White : sf::Color::Transparent);

    sf::Text backButton;
    backButton.setFont(font);
    backButton.setCharacterSize(30);
    backButton.setFillColor(sf::Color::White);
    backButton.setString("Back");
    backButton.setPosition(300, 500);

    sf::Text typedText;
    typedText.setFont(font);
    typedText.setCharacterSize(30);
    typedText.setFillColor(sf::Color::Green);
    typedText.setPosition(50, 550);
    std::string typedString;

    sf::Text scoreText;
    scoreText.setFont(font);
    scoreText.setCharacterSize(30);
    scoreText.setFillColor(sf::Color::Red);
    scoreText.setPosition(50, 510);
    int score = 0;
    scoreText.setString("Score: " + std::to_string(score));

    sf::Text missedText;
    missedText.setFont(font);
    missedText.setCharacterSize(30);
    missedText.setFillColor(sf::Color::Red);
    missedText.setPosition(50, 470);
    int missed = 0;
    missedText.setString("Missed: " + std::to_string(missed));

    sf::Text highScoresText;
    highScoresText.setFont(font);
    highScoresText.setCharacterSize(40);
    highScoresText.setFillColor(sf::Color::White);
    highScoresText.setPosition(250, 200);
    highScoresText.setString("");

    std::vector<std::pair<std::string, sf::Vector2f>> words;

    std::vector<Star> stars;
    for (int i = 0; i < 100; ++i) {
        stars.emplace_back(window);
    }

    sf::Clock clock;
    sf::Time gameOverDisplayTime = sf::seconds(2);  // Time to display "Game Over!" message
    sf::Time elapsedGameOverTime = sf::Time::Zero;  // Track elapsed time since "Game Over!"

    auto startNewGame = [&]() {
        missed = 0;
        score = 0;
        typedString.clear();
        words.clear();
        missedText.setString("Missed: " + std::to_string(missed));
        scoreText.setString("Score: " + std::to_string(score));
        state = GAME;
    };

    while (window.isOpen()) {
        float deltaTime = clock.restart().asSeconds();

        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed) {
                window.close();
            }

            if (state == MENU) {
                if (event.type == sf::Event::MouseButtonPressed) {
                    if (startButton.getGlobalBounds().contains(window.mapPixelToCoords(sf::Mouse::getPosition(window)))) {
                        startNewGame();
                    } else if (gameModeButton.getGlobalBounds().contains(window.mapPixelToCoords(sf::Mouse::getPosition(window)))) {
                        state = GAME_MODE;
                    } else if (tutorialButton.getGlobalBounds().contains(window.mapPixelToCoords(sf::Mouse::getPosition(window)))) {
                        state = TUTORIAL;
                    } else if (highScoreButton.getGlobalBounds().contains(window.mapPixelToCoords(sf::Mouse::getPosition(window)))) {
                        state = HIGH_SCORES;
                        std::string highScoresString = "High Scores:\n";
                        for (int i = 0; i < highScores.size(); ++i) {
                            highScoresString += std::to_string(i + 1) + ". " + std::to_string(highScores[i]) + "\n";
                        }
                        highScoresText.setString(highScoresString);
                    } else if (quitButton.getGlobalBounds().contains(window.mapPixelToCoords(sf::Mouse::getPosition(window)))) {
                        window.close();
                    }
                }
            } else if (state == GAME_MODE) {
                if (event.type == sf::Event::MouseButtonPressed) {
                    if (speedOption1.getGlobalBounds().contains(window.mapPixelToCoords(sf::Mouse::getPosition(window)))) {
                        settings.wordSpeed = 1.0f;
                        speedOption1.setFillColor(sf::Color::White);
                        speedOption2.setFillColor(sf::Color::Transparent);
                        speedOption3.setFillColor(sf::Color::Transparent);
                    } else if (speedOption2.getGlobalBounds().contains(window.mapPixelToCoords(sf::Mouse::getPosition(window)))) {
                        settings.wordSpeed = 2.0f;
                        speedOption1.setFillColor(sf::Color::Transparent);
                        speedOption2.setFillColor(sf::Color::White);
                        speedOption3.setFillColor(sf::Color::Transparent);
                    } else if (speedOption3.getGlobalBounds().contains(window.mapPixelToCoords(sf::Mouse::getPosition(window)))) {
                        settings.wordSpeed = 3.0f;
                        speedOption1.setFillColor(sf::Color::Transparent);
                        speedOption2.setFillColor(sf::Color::Transparent);
                        speedOption3.setFillColor(sf::Color::White);
                    } else if (lengthOption1.getGlobalBounds().contains(window.mapPixelToCoords(sf::Mouse::getPosition(window)))) {
                        settings.wordLength = 3;
                        lengthOption1.setFillColor(sf::Color::White);
                        lengthOption2.setFillColor(sf::Color::Transparent);
                        lengthOption3.setFillColor(sf::Color::Transparent);
                    } else if (lengthOption2.getGlobalBounds().contains(window.mapPixelToCoords(sf::Mouse::getPosition(window)))) {
                        settings.wordLength = 5;
                        lengthOption1.setFillColor(sf::Color::Transparent);
                        lengthOption2.setFillColor(sf::Color::White);
                        lengthOption3.setFillColor(sf::Color::Transparent);
                    } else if (lengthOption3.getGlobalBounds().contains(window.mapPixelToCoords(sf::Mouse::getPosition(window)))) {
                        settings.wordLength = 7;
                        lengthOption1.setFillColor(sf::Color::Transparent);
                        lengthOption2.setFillColor(sf::Color::Transparent);
                        lengthOption3.setFillColor(sf::Color::White);
                    } else if (backButton.getGlobalBounds().contains(window.mapPixelToCoords(sf::Mouse::getPosition(window)))) {
                        state = MENU;
                    }
                }
            } else if (state == GAME) {
                if (event.type == sf::Event::TextEntered) {
                    if (event.text.unicode < 128) {
                        char typedChar = static_cast<char>(event.text.unicode);
                        if (typedChar == '\b') {
                            if (!typedString.empty()) {
                                typedString.pop_back();
                                typedText.setString("Typing word: " + typedString);
                            }
                        } else if (std::isprint(typedChar)) {
                            typedString += typedChar;
                            typedText.setString("Typing word: " + typedString);

                            auto it = std::find_if(words.begin(), words.end(), [&](const auto& pair) {
                                return pair.first == typedString;
                            });
                            if (it != words.end()) {
                                words.erase(it);
                                typedString.clear();
                                typedText.setString("Typing word: " + typedString);
                                score++;
                                scoreText.setString("Score: " + std::to_string(score));
                            }
                        }
                    }
                }
            } else if (state == TUTORIAL) {
                if (event.type == sf::Event::MouseButtonPressed) {
                    if (backButton.getGlobalBounds().contains(window.mapPixelToCoords(sf::Mouse::getPosition(window)))) {
                        state = MENU;
                    }
                }
            } else if (state == HIGH_SCORES) {
                if (event.type == sf::Event::MouseButtonPressed) {
                    if (backButton.getGlobalBounds().contains(window.mapPixelToCoords(sf::Mouse::getPosition(window)))) {
                        state = MENU;
                    }
                }
            }
        }

        // Handle game over state transition
        if (state == GAME_OVER) {
            elapsedGameOverTime += sf::seconds(deltaTime);
            if (elapsedGameOverTime >= gameOverDisplayTime) {
                state = MENU;
                elapsedGameOverTime = sf::Time::Zero;
            }
        }

        window.clear();

        // Draw stars in all states
        for (auto& star : stars) {
            star.update(deltaTime * 50);
            star.draw(window);
        }

        if (state == MENU) {
            window.draw(titleText);
            window.draw(startButton);
            window.draw(gameModeButton);
            window.draw(tutorialButton);
            window.draw(highScoreButton);
            window.draw(quitButton);
        } else if (state == GAME_MODE) {
            window.draw(gameModeSpeedLabel);
            window.draw(speedOption1);
            window.draw(speedOption2);
            window.draw(speedOption3);
            window.draw(speedOption1Label);
            window.draw(speedOption2Label);
            window.draw(speedOption3Label);
            window.draw(gameModeLengthLabel);
            window.draw(lengthOption1);
            window.draw(lengthOption2);
            window.draw(lengthOption3);
            window.draw(lengthOption1Label);
            window.draw(lengthOption2Label);
            window.draw(lengthOption3Label);
            window.draw(backButton);
        } else if (state == GAME) {
            for (auto it = words.begin(); it != words.end();) {
                it->second.x += settings.wordSpeed;
                if (it->second.x > window.getSize().x) {
                    it = words.erase(it);
                    missed++;
                    missedText.setString("Missed: " + std::to_string(missed));
                    if (missed >= 10) {
                        state = GAME_OVER;
                        highScores.push_back(score);
                        std::sort(highScores.rbegin(), highScores.rend());
                        if (highScores.size() > 3) {
                            highScores.pop_back();
                        }
                        saveHighScores(highScores);
                    }
                } else {
                    sf::Text wordText;
                    wordText.setFont(font);
                    wordText.setCharacterSize(30);
                    wordText.setFillColor(sf::Color::White);
                    wordText.setString(it->first);
                    wordText.setPosition(it->second);
                    window.draw(wordText);
                    ++it;
                }
            }

            if (rand() % 100 == 0) {
                words.push_back({ getRandomWord(settings.wordLength), getRandomPosition(window, words) });
            }

            window.draw(typedText);
            window.draw(scoreText);
            window.draw(missedText);
        } else if (state == TUTORIAL) {
            sf::Text tutorialText;
            tutorialText.setFont(font);
            tutorialText.setCharacterSize(30);
            tutorialText.setFillColor(sf::Color::White);
            tutorialText.setString("Tutorial:\nType the words before they reach the right edge.\nAvoid missing too many words! "
                                   "If missing words > 10, you lose\nTry different game modes to increase difficulty. Good luck!");
            tutorialText.setPosition(100, 100);
            window.draw(tutorialText);
            window.draw(backButton);
        } else if (state == HIGH_SCORES) {
            window.draw(highScoresText);
            window.draw(backButton);
        } else if (state == GAME_OVER) {
            window.draw(gameOverText);
        }

        window.display();
    }

    return EXIT_SUCCESS;
}
